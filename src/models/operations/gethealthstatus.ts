/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Health status
 */
export type GetHealthStatusResponseBody = {
  status?: string | undefined;
};

export type GetHealthStatusResponse =
  | models.DefaultErrorDTO
  | GetHealthStatusResponseBody;

/** @internal */
export const GetHealthStatusResponseBody$inboundSchema: z.ZodType<
  GetHealthStatusResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
});

/** @internal */
export type GetHealthStatusResponseBody$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const GetHealthStatusResponseBody$outboundSchema: z.ZodType<
  GetHealthStatusResponseBody$Outbound,
  z.ZodTypeDef,
  GetHealthStatusResponseBody
> = z.object({
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHealthStatusResponseBody$ {
  /** @deprecated use `GetHealthStatusResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetHealthStatusResponseBody$inboundSchema;
  /** @deprecated use `GetHealthStatusResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetHealthStatusResponseBody$outboundSchema;
  /** @deprecated use `GetHealthStatusResponseBody$Outbound` instead. */
  export type Outbound = GetHealthStatusResponseBody$Outbound;
}

export function getHealthStatusResponseBodyToJSON(
  getHealthStatusResponseBody: GetHealthStatusResponseBody,
): string {
  return JSON.stringify(
    GetHealthStatusResponseBody$outboundSchema.parse(
      getHealthStatusResponseBody,
    ),
  );
}

export function getHealthStatusResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetHealthStatusResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHealthStatusResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHealthStatusResponseBody' from JSON`,
  );
}

/** @internal */
export const GetHealthStatusResponse$inboundSchema: z.ZodType<
  GetHealthStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.DefaultErrorDTO$inboundSchema,
  z.lazy(() => GetHealthStatusResponseBody$inboundSchema),
]);

/** @internal */
export type GetHealthStatusResponse$Outbound =
  | models.DefaultErrorDTO$Outbound
  | GetHealthStatusResponseBody$Outbound;

/** @internal */
export const GetHealthStatusResponse$outboundSchema: z.ZodType<
  GetHealthStatusResponse$Outbound,
  z.ZodTypeDef,
  GetHealthStatusResponse
> = z.union([
  models.DefaultErrorDTO$outboundSchema,
  z.lazy(() => GetHealthStatusResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHealthStatusResponse$ {
  /** @deprecated use `GetHealthStatusResponse$inboundSchema` instead. */
  export const inboundSchema = GetHealthStatusResponse$inboundSchema;
  /** @deprecated use `GetHealthStatusResponse$outboundSchema` instead. */
  export const outboundSchema = GetHealthStatusResponse$outboundSchema;
  /** @deprecated use `GetHealthStatusResponse$Outbound` instead. */
  export type Outbound = GetHealthStatusResponse$Outbound;
}

export function getHealthStatusResponseToJSON(
  getHealthStatusResponse: GetHealthStatusResponse,
): string {
  return JSON.stringify(
    GetHealthStatusResponse$outboundSchema.parse(getHealthStatusResponse),
  );
}

export function getHealthStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetHealthStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHealthStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHealthStatusResponse' from JSON`,
  );
}
