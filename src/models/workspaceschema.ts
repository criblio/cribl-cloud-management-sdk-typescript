/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * AWS region where the workspace is deployed
 */
export const Region = {
  UsWest2: "us-west-2",
  UsEast1: "us-east-1",
  UsEast2: "us-east-2",
  EuCentral1: "eu-central-1",
  EuCentral2: "eu-central-2",
  EuWest2: "eu-west-2",
  ApSoutheast1: "ap-southeast-1",
  ApSoutheast2: "ap-southeast-2",
  CaCentral1: "ca-central-1",
} as const;
/**
 * AWS region where the workspace is deployed
 */
export type Region = OpenEnum<typeof Region>;

/**
 * Current state of the workspace
 */
export const State = {
  WorkspaceRequested: "Workspace-Requested",
  WorkspaceProvisioning: "Workspace-Provisioning",
  WorkspaceProvisioningFailed: "Workspace-Provisioning-Failed",
  WorkspaceProvisioned: "Workspace-Provisioned",
  WorkspaceActive: "Workspace-Active",
  WorkspaceUpdated: "Workspace-Updated",
  WorkspaceFailedUpdate: "Workspace-Failed-Update",
  WorkspaceCleanupRequested: "Workspace-Cleanup-Requested",
  WorkspaceCleanupStarted: "Workspace-Cleanup-Started",
  WorkspaceCleanupTerraformCompleted: "Workspace-Cleanup-Terraform-Completed",
  WorkspaceCleanupTerraformFailed: "Workspace-Cleanup-Terraform-Failed",
  WorkspaceCleanupCompleted: "Workspace-Cleanup-Completed",
  WorkspaceCleanupFailed: "Workspace-Cleanup-Failed",
} as const;
/**
 * Current state of the workspace
 */
export type State = OpenEnum<typeof State>;

export type WorkspaceSchema = {
  /**
   * Unique identifier for the workspace
   */
  workspaceId: string;
  /**
   * AWS region where the workspace is deployed
   */
  region: Region;
  /**
   * Timestamp when the workspace was last updated
   */
  lastUpdated: Date;
  /**
   * Fully Qualified Domain Name of the workspace leader
   */
  leaderFQDN: string;
  /**
   * Current state of the workspace
   */
  state: State;
  /**
   * User-friendly alias for the workspace
   */
  alias?: string | undefined;
  /**
   * Detailed description of the workspace
   */
  description?: string | undefined;
  /**
   * Tags associated with the workspace
   */
  tags?: Array<string> | undefined;
};

/** @internal */
export const Region$inboundSchema: z.ZodType<Region, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(Region),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const Region$outboundSchema: z.ZodType<Region, z.ZodTypeDef, Region> = z
  .union([
    z.nativeEnum(Region),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Region$ {
  /** @deprecated use `Region$inboundSchema` instead. */
  export const inboundSchema = Region$inboundSchema;
  /** @deprecated use `Region$outboundSchema` instead. */
  export const outboundSchema = Region$outboundSchema;
}

/** @internal */
export const State$inboundSchema: z.ZodType<State, z.ZodTypeDef, unknown> = z
  .union([
    z.nativeEnum(State),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const State$outboundSchema: z.ZodType<State, z.ZodTypeDef, State> = z
  .union([
    z.nativeEnum(State),
    z.string().and(z.custom<Unrecognized<string>>()),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const WorkspaceSchema$inboundSchema: z.ZodType<
  WorkspaceSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspaceId: z.string(),
  region: Region$inboundSchema,
  lastUpdated: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  leaderFQDN: z.string(),
  state: State$inboundSchema,
  alias: z.string().optional(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type WorkspaceSchema$Outbound = {
  workspaceId: string;
  region: string;
  lastUpdated: string;
  leaderFQDN: string;
  state: string;
  alias?: string | undefined;
  description?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const WorkspaceSchema$outboundSchema: z.ZodType<
  WorkspaceSchema$Outbound,
  z.ZodTypeDef,
  WorkspaceSchema
> = z.object({
  workspaceId: z.string(),
  region: Region$outboundSchema,
  lastUpdated: z.date().transform(v => v.toISOString()),
  leaderFQDN: z.string(),
  state: State$outboundSchema,
  alias: z.string().optional(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceSchema$ {
  /** @deprecated use `WorkspaceSchema$inboundSchema` instead. */
  export const inboundSchema = WorkspaceSchema$inboundSchema;
  /** @deprecated use `WorkspaceSchema$outboundSchema` instead. */
  export const outboundSchema = WorkspaceSchema$outboundSchema;
  /** @deprecated use `WorkspaceSchema$Outbound` instead. */
  export type Outbound = WorkspaceSchema$Outbound;
}

export function workspaceSchemaToJSON(
  workspaceSchema: WorkspaceSchema,
): string {
  return JSON.stringify(WorkspaceSchema$outboundSchema.parse(workspaceSchema));
}

export function workspaceSchemaFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceSchema' from JSON`,
  );
}
