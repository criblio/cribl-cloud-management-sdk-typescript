/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import {
  catchUnrecognizedEnum,
  OpenEnum,
  Unrecognized,
} from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * AWS region where the workspace is deployed
 */
export const WorkspaceCreateRequestDTORegion = {
  UsWest2: "us-west-2",
  UsEast1: "us-east-1",
  EuCentral1: "eu-central-1",
  EuWest2: "eu-west-2",
  ApSoutheast2: "ap-southeast-2",
  CaCentral1: "ca-central-1",
  UsEast2: "us-east-2",
} as const;
/**
 * AWS region where the workspace is deployed
 */
export type WorkspaceCreateRequestDTORegion = OpenEnum<
  typeof WorkspaceCreateRequestDTORegion
>;

export type WorkspaceCreateRequestDTO = {
  /**
   * Unique identifier for the workspace
   */
  workspaceId: string;
  /**
   * AWS region where the workspace is deployed
   */
  region: WorkspaceCreateRequestDTORegion;
  /**
   * User-friendly alias for the workspace
   */
  alias?: string | undefined;
  /**
   * Detailed description of the workspace
   */
  description?: string | undefined;
  /**
   * Tags associated with the workspace
   */
  tags?: Array<string> | undefined;
};

/** @internal */
export const WorkspaceCreateRequestDTORegion$inboundSchema: z.ZodType<
  WorkspaceCreateRequestDTORegion,
  z.ZodTypeDef,
  unknown
> = z
  .union([
    z.nativeEnum(WorkspaceCreateRequestDTORegion),
    z.string().transform(catchUnrecognizedEnum),
  ]);

/** @internal */
export const WorkspaceCreateRequestDTORegion$outboundSchema: z.ZodType<
  WorkspaceCreateRequestDTORegion,
  z.ZodTypeDef,
  WorkspaceCreateRequestDTORegion
> = z.union([
  z.nativeEnum(WorkspaceCreateRequestDTORegion),
  z.string().and(z.custom<Unrecognized<string>>()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceCreateRequestDTORegion$ {
  /** @deprecated use `WorkspaceCreateRequestDTORegion$inboundSchema` instead. */
  export const inboundSchema = WorkspaceCreateRequestDTORegion$inboundSchema;
  /** @deprecated use `WorkspaceCreateRequestDTORegion$outboundSchema` instead. */
  export const outboundSchema = WorkspaceCreateRequestDTORegion$outboundSchema;
}

/** @internal */
export const WorkspaceCreateRequestDTO$inboundSchema: z.ZodType<
  WorkspaceCreateRequestDTO,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspaceId: z.string(),
  region: WorkspaceCreateRequestDTORegion$inboundSchema,
  alias: z.string().optional(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type WorkspaceCreateRequestDTO$Outbound = {
  workspaceId: string;
  region: string;
  alias?: string | undefined;
  description?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const WorkspaceCreateRequestDTO$outboundSchema: z.ZodType<
  WorkspaceCreateRequestDTO$Outbound,
  z.ZodTypeDef,
  WorkspaceCreateRequestDTO
> = z.object({
  workspaceId: z.string(),
  region: WorkspaceCreateRequestDTORegion$outboundSchema,
  alias: z.string().optional(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceCreateRequestDTO$ {
  /** @deprecated use `WorkspaceCreateRequestDTO$inboundSchema` instead. */
  export const inboundSchema = WorkspaceCreateRequestDTO$inboundSchema;
  /** @deprecated use `WorkspaceCreateRequestDTO$outboundSchema` instead. */
  export const outboundSchema = WorkspaceCreateRequestDTO$outboundSchema;
  /** @deprecated use `WorkspaceCreateRequestDTO$Outbound` instead. */
  export type Outbound = WorkspaceCreateRequestDTO$Outbound;
}

export function workspaceCreateRequestDTOToJSON(
  workspaceCreateRequestDTO: WorkspaceCreateRequestDTO,
): string {
  return JSON.stringify(
    WorkspaceCreateRequestDTO$outboundSchema.parse(workspaceCreateRequestDTO),
  );
}

export function workspaceCreateRequestDTOFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceCreateRequestDTO, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceCreateRequestDTO$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceCreateRequestDTO' from JSON`,
  );
}
