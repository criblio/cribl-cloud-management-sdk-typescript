/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workspacesCreate } from "../funcs/workspacesCreate.js";
import { workspacesDelete } from "../funcs/workspacesDelete.js";
import { workspacesGet } from "../funcs/workspacesGet.js";
import { workspacesList } from "../funcs/workspacesList.js";
import { workspacesUpdate } from "../funcs/workspacesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Workspaces extends ClientSDK {
  /**
   * Create a Workspace in the specified Organization
   *
   * @remarks
   * Create a new Workspace in the specified Organization.
   */
  async create(
    request: operations.V1WorkspacesCreateWorkspaceRequest,
    options?: RequestOptions,
  ): Promise<operations.V1WorkspacesCreateWorkspaceResponse> {
    return unwrapAsync(workspacesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List all Workspaces for the specified Organization
   *
   * @remarks
   * Get a list of all Workspaces for the specified Organization.
   */
  async list(
    request: operations.V1WorkspacesListWorkspacesRequest,
    options?: RequestOptions,
  ): Promise<operations.V1WorkspacesListWorkspacesResponse> {
    return unwrapAsync(workspacesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Workspace
   *
   * @remarks
   * Update the specified Workspace.
   */
  async update(
    request: operations.V1WorkspacesUpdateWorkspaceRequest,
    options?: RequestOptions,
  ): Promise<models.DefaultErrorDTO | undefined> {
    return unwrapAsync(workspacesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Workspace
   *
   * @remarks
   * Delete the specified Workspace in the specified Organization.
   */
  async delete(
    request: operations.V1WorkspacesDeleteWorkspaceRequest,
    options?: RequestOptions,
  ): Promise<models.DefaultErrorDTO | undefined> {
    return unwrapAsync(workspacesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Workspace
   *
   * @remarks
   * Get the specified Workspace.
   */
  async get(
    request: operations.V1WorkspacesGetWorkspaceRequest,
    options?: RequestOptions,
  ): Promise<operations.V1WorkspacesGetWorkspaceResponse> {
    return unwrapAsync(workspacesGet(
      this,
      request,
      options,
    ));
  }
}
