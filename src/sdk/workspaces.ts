/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workspacesCreate } from "../funcs/workspacesCreate.js";
import { workspacesDelete } from "../funcs/workspacesDelete.js";
import { workspacesGet } from "../funcs/workspacesGet.js";
import { workspacesList } from "../funcs/workspacesList.js";
import { workspacesUpdate } from "../funcs/workspacesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Workspaces extends ClientSDK {
  /**
   * Create a new workspace
   */
  async create(
    security: operations.V1WorkspacesCreateWorkspaceSecurity,
    request: operations.V1WorkspacesCreateWorkspaceRequest,
    options?: RequestOptions,
  ): Promise<models.WorkspaceSchema> {
    return unwrapAsync(workspacesCreate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List all workspaces for an organization
   */
  async list(
    security: operations.V1WorkspacesListWorkspacesSecurity,
    request: operations.V1WorkspacesListWorkspacesRequest,
    options?: RequestOptions,
  ): Promise<models.WorkspacesListResponseDTO> {
    return unwrapAsync(workspacesList(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update an existing workspace
   */
  async update(
    security: operations.V1WorkspacesUpdateWorkspaceSecurity,
    request: operations.V1WorkspacesUpdateWorkspaceRequest,
    options?: RequestOptions,
  ): Promise<models.WorkspaceSchema> {
    return unwrapAsync(workspacesUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete a workspace
   */
  async delete(
    security: operations.V1WorkspacesDeleteWorkspaceSecurity,
    request: operations.V1WorkspacesDeleteWorkspaceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(workspacesDelete(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get a specific workspace by ID
   */
  async get(
    security: operations.V1WorkspacesGetWorkspaceSecurity,
    request: operations.V1WorkspacesGetWorkspaceRequest,
    options?: RequestOptions,
  ): Promise<models.WorkspaceSchema> {
    return unwrapAsync(workspacesGet(
      this,
      security,
      request,
      options,
    ));
  }
}
